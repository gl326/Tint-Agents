<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>key_left = vk_left;
key_right = vk_right;
key_up = vk_up;
key_down = vk_down;

key_jump = vk_shift;
key_shoot = vk_control;

horzSpeed = 8;
jumpSpeed = 12;
gravityStr = 1;
accel = 6; //speed / accel is what ets added per frame

angle = 0;

my_blend = c_white;

player = 0;
grounded = false;

stun = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if keyboard_check(key_right){hspeed += horzSpeed/accel*sqr(1-stun);}  
//if keyboard_check(key_left){hspeed -= horzSpeed/accel*sqr(1-stun);}  
//if (!keyboard_check(key_left) and !keyboard_check(key_right)) or (stun&gt;0){hspeed += (0 - hspeed)*.2;}
if gamepad_is_connected(player){
var analog = GetAnalogStick(player);
var analogX = analog[0], analogY = analog[1],
    jump = GetAButtonPressed(player),jumping = GetAButton(player),
    shoot = GetXButtonPressed(player);
}else{
var analogX = keyboard_check(key_right) - keyboard_check(key_left);
var analogY = keyboard_check(key_down) - keyboard_check(key_up);
var jump = keyboard_check_pressed(key_jump),jumping = keyboard_check(key_jump),
    shoot = keyboard_check_pressed(key_shoot);
}

hspeed += horzSpeed/accel*sqr(1-stun)*analogX;
/*if( analogX &gt; 0){
    hspeed += horzSpeed/accel*sqr(1-stun)*analogX;
} 
if( analogX &lt; 0){
    hspeed -= horzSpeed/accel*sqr(1-stun);
} */
if( stun &gt; 0 or analogX == 0){
    hspeed += (0 - hspeed)*.2;
}
hspeed = max(-horzSpeed,min(horzSpeed,hspeed));

angle += ((hspeed*2) - angle)*.8;

if vspeed&gt;=0{ //standing or falling
if place_meeting(x,y+1,objBlock){
y = round(y-vspeed);
while(!place_meeting(x,y+1,objBlock)){y+=1;}

grounded = true;
vspeed = 0;
gravity = 0;
}
else{
if grounded{
grounded = false;
gravity = gravityStr;
}
}
}else{
if place_meeting(x,y-1,objBlock){
y = round(y-vspeed);
while(!place_meeting(x,y-1,objBlock)){y-=1;}
vspeed = 0;
}
}

if place_meeting(x+sign(hspeed),y,objBlock){
x = round(x-hspeed);
while(!place_meeting(x+sign(hspeed),y,objBlock)){x+=sign(hspeed);}
hspeed = 0;
}

if grounded and jump{ //keyboard_check_pressed(key_jump){
vspeed = -jumpSpeed;
gravity = gravityStr;
grounded = false;
}

if !grounded and !jumping{ //!keyboard_check(key_jump){
gravity = gravityStr*(2+(max(0,analogY)));
}

image_blend = merge_color(my_blend,image_blend,stun);

if stun&gt;0{stun -= (1/(room_speed/2));}
else{stun = 0;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stun = 1;
if x&gt;other.x{hspeed = horzSpeed;}
else{hspeed = -horzSpeed;}

image_blend = c_black;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init

if player{
image_blend = c_yellow;
my_blend = image_blend;

key_left = vk_left;
key_right = vk_right;
key_up = vk_up;
key_down = vk_down;

key_jump = vk_shift;
key_shoot = vk_control;
}
else{
image_blend = c_aqua;
my_blend = image_blend;

key_left = ord('A');
key_right = ord('D');
key_up = ord('W');
key_down = ord('S');

key_jump = ord('Z');
key_shoot = ord('X');
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,image_index,x,y,image_xscale*(1+(abs(hspeed)/horzSpeed/2)),image_yscale*(1+(abs(vspeed)/15)),angle,image_blend,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,32</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
